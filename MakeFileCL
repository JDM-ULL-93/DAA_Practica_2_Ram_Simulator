#use : nmake /F MakeFileCL all
# 	+info:https://docs.microsoft.com/en-us/cpp/build/reference/running-nmake?view=vs-2019

#define macros
EXECUTABLE_NAME = main.exe
#DIR_SRC = \
#DIR_INCLUDE = \
DIR_BIN = .\bin
DIR_BIN_X86 = $(DIR_BIN)\x86
#DIR_SYMBOLS = $(DIR_BIN_X86)\symbols
DIR_INTERMEDIATE = .\intermediate
DIR_INTERMEDIATE_X86 = $(DIR_INTERMEDIATE)\x86

SRC_FILES= \
	Practica_2_RAM_Simulador.cpp \
	Exception.cpp \
	FileHandler.cpp \
	Tokenizer.cpp \
	RAMMAchine.cpp 
  
OBJ_FILES = \
	$(DIR_INTERMEDIATE_X86)\Practica_2_RAM_Simulador.obj \
	$(DIR_INTERMEDIATE_X86)\Exception.obj \
	$(DIR_INTERMEDIATE_X86)\FileHandler.obj \
	$(DIR_INTERMEDIATE_X86)\Tokenizer.obj \
	$(DIR_INTERMEDIATE_X86)\RAMMAchine.obj


#Sintaxis de reglas es igual que en UNIX:
#<nombre_regla> : <dependencias>
#	<comando_a_ejecutar>
#+info : http://www.bojankomazec.com/2011/10/how-to-use-nmake-and-makefile.html

#cl options: +info: https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-alphabetically?view=vs-2019
# /c <- Solo compila
# /EHsc <- Exception Handling Model : s <- Solo captura excepciones sincronas(C++), c<- funciones declaradas como "extern" nunca soltaran excepciones
# /Fe<arg> <- Establece el nombre final del output resultado
# /std:c++latest; <- Compila en estandar c++ v <La ultima que se halle instalada en la maquina>
# /W4 <- Establece el nivel de output warning al maximo (tiquismiquis total)
# /Z<arg> <- /Z Genera simbolos para debugger.<arg> == 7 guarda esta informaci√≥n en el propio .obj , <arg> == i lo guarda en un fichero PDB separado

#compile chunk
$(DIR_INTERMEDIATE_X86)\Practica_2_RAM_Simulador.obj: Practica_2_RAM_Simulador.cpp
	cl /c /EHsc /std:c++17 /Z7 /Fe$(DIR_BIN_X86)\Practica_2_RAM_Simulador.obj /I. Practica_2_RAM_Simulador.cpp
	copy *.obj $(DIR_INTERMEDIATE_X86)
	del *.obj
#	move *.pdb $(DIR_SYMBOLS)\Practica_2_RAM_Simulador.pdb

$(DIR_INTERMEDIATE_X86)\Exception.obj: Exception.cpp
	cl /c /EHsc /std:c++17 /Z7 /Fe$(DIR_BIN_X86)\Exception.obj /I. Exception.cpp
	copy *.obj $(DIR_INTERMEDIATE_X86)
	del *.obj
#	move *.pdb $(DIR_SYMBOLS)\Exception.pdb
	
$(DIR_INTERMEDIATE_X86)\FileHandler.obj: FileHandler.cpp
	cl /c /EHsc /std:c++17 /Z7 /Fe$(DIR_BIN_X86)\FileHandler.obj /I. FileHandler.cpp
	copy *.obj $(DIR_INTERMEDIATE_X86)
	del *.obj
#	move *.pdb $(DIR_SYMBOLS)\FileHandler.pdb
	
$(DIR_INTERMEDIATE_X86)\Tokenizer.obj: Tokenizer.cpp
	cl /c /EHsc /std:c++17 /Z7 /Fe$(DIR_BIN_X86)\Tokenizer.obj /I. Tokenizer.cpp
	copy *.obj $(DIR_INTERMEDIATE_X86)
	del *.obj
#	move *.pdb $(DIR_SYMBOLS)\Tokenizer.pdb
	
$(DIR_INTERMEDIATE_X86)\RAMMAchine.obj: RAMMAchine.cpp
	cl /c /EHsc /std:c++17 /Z7 /Fe$(DIR_BIN_X86)\RAMMAchine.obj /I. RAMMAchine.cpp
	copy *.obj $(DIR_INTERMEDIATE_X86)
	del *.obj
#	move *.pdb $(DIR_SYMBOLS)\RAMMAchine.pdb
  
# link . + info : https://docs.microsoft.com/en-us/cpp/build/reference/linker-options?view=vs-2019
#/debug
$(EXECUTABLE_NAME) : $(OBJ_FILES)
	link  /debug /out:$(DIR_BIN_X86)\$(EXECUTABLE_NAME) $(OBJ_FILES) 
  
# delete output directories
clean:
	@if exist $(DIR_BIN) rmdir /S /Q $(DIR_BIN)
	@if exist $(DIR_INTERMEDIATE) rmdir /S /Q $(DIR_INTERMEDIATE)
 
# create output directories
create_dirs:
	@if not exist $(DIR_BIN_X86) mkdir $(DIR_BIN_X86)
	@if not exist $(DIR_INTERMEDIATE_X86) mkdir $(DIR_INTERMEDIATE_X86)
	
# build application
build: $(EXECUTABLE_NAME)

# create directories and build application
all: clean create_dirs build
